import React, { createContext, useContext, useState, ReactNode } from 'react';

interface VulnerabilityContextType {
  vulnerabilities: string[];
  addVulnerability: (vuln: string) => void;
  clearVulnerabilities: () => void;
}

const VulnerabilityContext = createContext<VulnerabilityContextType | undefined>(undefined);

export const useVulnerability = () => {
  const context = useContext(VulnerabilityContext);
  if (context === undefined) {
    throw new Error('useVulnerability must be used within a VulnerabilityProvider');
  }
  return context;
};

interface VulnerabilityProviderProps {
  children: ReactNode;
}

export const VulnerabilityProvider: React.FC<VulnerabilityProviderProps> = ({ children }) => {
  const [vulnerabilities, setVulnerabilities] = useState<string[]>([]);

  const addVulnerability = (vuln: string) => {
    setVulnerabilities(prev => [...prev, vuln]);
  };

  const clearVulnerabilities = () => {
    setVulnerabilities([]);
  };

  const value = {
    vulnerabilities,
    addVulnerability,
    clearVulnerabilities
  };

  return (
    <VulnerabilityContext.Provider value={value}>
      {children}
    </VulnerabilityContext.Provider>
  );
}; 